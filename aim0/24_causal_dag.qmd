---
title: "Causal Dag"
editor: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
            message = FALSE,
            comment = "#>",
            warning = FALSE,
            #results = "hide",
            digits = 4,
            error = FALSE)

## load packages
library(DiagrammeR)
library(ggdag)      # For plotting DAGs
library(dagitty)    # For working with DAG logic
library(ggplot2)
```

```{css, echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 1000px;
  overflow-y: auto;
  background-color: inherit;
}
```


## Causal DAG {#sec-causal_dag}

Directed Acyclic Graph (DAG) is a graphical representation of causal relationships between variables. It is a useful visual tool for developing the statistical analysis plan for a randomized trial, and helps facilitate communication between statisticians and other investigators.

<!-- May be helpful to include a DAG or other graph/diagram that describes the way the variables of interest are presumed to relate -->


```{r}
knitr::include_graphics("figures/F23_causal_dag1.png")
```


```{r}
knitr::include_graphics("figures/F23_causal_dag2.png")
```

## DAG with `ggdag` {#sec-ggdag}

Here is the package [`ggdag`](https://r-causal.github.io/ggdag/) to build a DAG. The package [`dagitty`](https://dagitty.net/) is used to work with DAG logic.

But it seems really hard to use in the case. 


```{r warning=FALSE, include=FALSE}
df_labels = data.frame(x = c(0, 0.5, 0.5, 0.33, 0.66, 0.5,  0.5, 1),
                       y = c(0, 1.75, 1,   0,  0,   -1, -1.75, 0),
                       label = c("Treatment", 
                                 "Confounder1",
                                 "Confounder2", 
                                 "Mediator1",
                                 "Mediator2",
                                 "Confounder3",
                                 "Confounder4",
                                 "Outcome"))

dag <- dagify(outcome ~ treatment + 
                confounder1 + 
                confounder2 + 
                mediator1 +
                mediator2 +
                confounder3 + 
                confounder4,
              mediator1 ~ treatment,
              mediator2 ~ mediator1,
              outcome ~ mediator2,
              treatment ~ confounder1 + 
                confounder2,
              treatment ~ confounder3 + 
                confounder4,
              latent = c("confounder1", "confounder3"),
  exposure = "treatment",
  outcome = "outcome",
  # labels = c(outcome = "Outcome", 
  #            treatment = "Deranged LFT", 
  #            confounder1 = "DM", 
  #            confounder2 = "Days on PN", 
  #            mediator = "Mediator", 
  #            confounder3 = "Presence of\nhepatotoxic drugs", 
  #            confounder4 = "Presence of\nline sepsis"),
  coords = list(x = c(treatment = 0, 
                      confounder1 = 0.5, 
                      confounder2 = 0.5, 
                      mediator1 = 0.33,
                      mediator2 = 0.66,
                      confounder3 = 0.5, 
                      confounder4 = 0.5, 
                      outcome = 1),
                y = c(treatment = 0, 
                      confounder1 = 1.75, 
                      confounder2 = 1, 
                      mediator1 = 0,
                      mediator2 = 0,
                      confounder3 = -1, 
                      confounder4 = -1.75, 
                      outcome = 0)))

ggdag_status(dag, 
             node_size = 20,
             edge_type = "link_arc",
             text = FALSE, 
             stylized = TRUE,
             check_overlap = TRUE) +
  guides(fill = FALSE, color = FALSE) +  
  geom_text(data = df_labels, 
            aes(x = x, 
                y = y, 
                label = label), 
            inherit.aes = FALSE, 
            size = 2) +
  theme_dag_blank() 
  # expand_plot(expand_y = expansion(c(0, 0))) 


# node_status(dag)

```

Here is the DAG for the example in the paper. 

```{r}
df_labels = data.frame(x = c(A = 1, D = 2, E = 3, 
                             `F` = 4, B = 1.5, C = 1.5),
                       y = c(A = 0, D = 0, E = 0, 
                             `F` = 0, B = 0.5, C = -0.5),
                       label = c("A: Intervention", "D: Mechanistic \nOutcomes", 
                                 "E: Proximal \nOutcome", 
                                 "F: Distal \nOutcome", "B: Effect \nModifiers", 
                                 "C: Other Factors \n(Covariates)"))

dag <- dagify(`F` ~ E, E ~ D, D ~ A,
              A ~ B, D ~ B, 
              `F` ~ C, E ~ C, D ~ C,
              latent = c("B", "D", "F"),
  exposure = "A",
  outcome = "F",
  coords = list(x = c(A = 1, D = 2, E = 3, 
                      `F` = 4, B = 1.5, C = 1.5),
                y = c(A = 0, D = 0, E = 0, 
                      `F` = 0, B = 0.5, C = -0.5)))

ggdag_status(dag, 
             node_size = 35,
             edge_type = "link_arc",
             text = FALSE, 
             stylized = TRUE,
             check_overlap = TRUE) +
  guides(fill = FALSE, color = FALSE) + 
  geom_dag_edges(start_cap = ggraph::circle(15, 'mm'),
                 end_cap = ggraph::circle(17, 'mm')) +
  geom_text(data = df_labels, 
            aes(x = x, y = y, 
                label = label), 
            inherit.aes = FALSE, 
            size = 3) +
  theme_dag_blank() 
  # expand_plot(expand_y = expansion(c(0, 0))) 

```

## DAG with `DiagrammeR` {#sec-diagrammer}

Here is the DAG for the example in the paper. 

```{r}
#| eval: false
#| fig-height: 3
#| fig-width: 6

flowchart2 <- DiagrammeR::grViz("
digraph {
  graph [layout = dot, rankdir = UD]

  # Define node styles
  node [shape = rectangle, style = filled, fontsize = 12, fontname = Helvetica]
  {# Nodes with colors
  edge [dir = none]
  A [label = 'A: Study Group'];
  invis1 [shape = none, style = invis]
  D [label = 'D*: Knowledge of Pain Coping Skills', fillcolor = lightblue]
  A -> invis1 [headclip=false]}
  
  E [label = 'E: Daily Pain Score'];
  F [label = 'F*: Quality of Life\\n(* Not used in Aim 1)', fillcolor = lightblue];
  {rank = same; A; invis1; D; E; F}
  # Draw arrows from A to D, E, and F
  invis1 -> D [tailclip=false]
  D -> E -> F
  
  B [label = 'B*: Primary Diagnosis\\n(Effect Modifiers)', fillcolor = lightblue];
  B -> invis1 [headclip=false] # helps position B above
  C [label = 'C: Age, Gender, etc.\\n(Adjustment Covariates)', fillcolor = lightsalmon];
  # Other arrows
  C -> {D, E, F}
}")


flowchart2
```









